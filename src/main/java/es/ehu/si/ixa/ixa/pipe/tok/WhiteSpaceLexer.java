/* The following code was generated by JFlex 1.4.3 on 08/10/14 17:19 */

package es.ehu.si.ixa.ixa.pipe.tok;

/* --------------------------Usercode Section------------------------ */


import java.io.Reader;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.Properties;
	
/* -----------------Options and Declarations Section----------------- */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08/10/14 17:19 from the specification file
 * <tt>WhiteSpaceLexer.jflex</tt>
 */
class WhiteSpaceLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\3\2\4\1\2\22\0\1\5\144\0\1\1\32\0"+
    "\1\5\u15df\0\1\5\u018d\0\1\5\u07f3\0\12\5\34\0\1\1\1\1"+
    "\5\0\1\5\57\0\2\5\u0f9f\0\1\5\ucfff\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\2\1\3"+
    "\171\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\6\0\14\0\22\0\30\0\36\0\44\0\30"+
    "\0\52\0\60\0\66\0\74\0\102\0\110\0\116\0\124"+
    "\0\132\0\140\0\146\0\154\0\162\0\170\0\176\0\204"+
    "\0\212\0\220\0\226\0\234\0\242\0\250\0\256\0\264"+
    "\0\272\0\300\0\306\0\314\0\322\0\330\0\336\0\344"+
    "\0\352\0\360\0\366\0\374\0\u0102\0\u0108\0\u010e\0\u0114"+
    "\0\u011a\0\u0120\0\u0126\0\u012c\0\u0132\0\u0138\0\u013e\0\u0144"+
    "\0\u014a\0\u0150\0\u0156\0\u015c\0\u0162\0\u0168\0\u016e\0\u0174"+
    "\0\u017a\0\u0180\0\u0186\0\u018c\0\u0192\0\u0198\0\u019e\0\u01a4"+
    "\0\u01aa\0\u01b0\0\u01b6\0\u01bc\0\u01c2\0\u01c8\0\u01ce\0\u01d4"+
    "\0\u01da\0\u01e0\0\u01e6\0\u01ec\0\u01f2\0\u01f8\0\u01fe\0\u0204"+
    "\0\u020a\0\u0210\0\u0216\0\u021c\0\u0222\0\u0228\0\u022e\0\u0234"+
    "\0\u023a\0\u0240\0\u0246\0\u024c\0\u0252\0\u0258\0\u025e\0\u0264"+
    "\0\u026a\0\u0270\0\u0276\0\u027c\0\u0282\0\u0288\0\u028e\0\u0294"+
    "\0\u029a\0\u02a0\0\u02a6\0\u02ac\0\u02b2\0\u02b8\0\u02be\0\u02c4"+
    "\0\u02ca\0\u02d0\0\u02d6\0\u02dc\0\u02e2\0\u02e8\0\u02ee\0\u02f4"+
    "\0\30";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\2\6\0"+
    "\1\7\1\0\1\7\5\0\1\10\15\0\1\6\1\0"+
    "\1\11\1\0\1\11\3\0\1\12\1\0\1\12\3\0"+
    "\1\13\1\0\1\13\3\0\1\14\1\0\1\14\3\0"+
    "\1\15\1\0\1\15\3\0\1\16\1\0\1\16\3\0"+
    "\1\17\1\0\1\17\3\0\1\20\1\0\1\20\3\0"+
    "\1\21\1\0\1\21\3\0\1\22\1\0\1\22\3\0"+
    "\1\23\1\0\1\23\3\0\1\24\1\0\1\24\3\0"+
    "\1\25\1\0\1\25\3\0\1\26\1\0\1\26\3\0"+
    "\1\27\1\0\1\27\3\0\1\30\1\0\1\30\3\0"+
    "\1\31\1\0\1\31\3\0\1\32\1\0\1\32\3\0"+
    "\1\33\1\0\1\33\3\0\1\34\1\0\1\34\3\0"+
    "\1\35\1\0\1\35\3\0\1\36\1\0\1\36\3\0"+
    "\1\37\1\0\1\37\3\0\1\40\1\0\1\40\3\0"+
    "\1\41\1\0\1\41\3\0\1\42\1\0\1\42\3\0"+
    "\1\43\1\0\1\43\3\0\1\44\1\0\1\44\3\0"+
    "\1\45\1\0\1\45\3\0\1\46\1\0\1\46\3\0"+
    "\1\47\1\0\1\47\3\0\1\50\1\0\1\50\3\0"+
    "\1\51\1\0\1\51\3\0\1\52\1\0\1\52\3\0"+
    "\1\53\1\0\1\53\3\0\1\54\1\0\1\54\3\0"+
    "\1\55\1\0\1\55\3\0\1\56\1\0\1\56\3\0"+
    "\1\57\1\0\1\57\3\0\1\60\1\0\1\60\3\0"+
    "\1\61\1\0\1\61\3\0\1\62\1\0\1\62\3\0"+
    "\1\63\1\0\1\63\3\0\1\64\1\0\1\64\3\0"+
    "\1\65\1\0\1\65\3\0\1\66\1\0\1\66\3\0"+
    "\1\67\1\0\1\67\3\0\1\70\1\0\1\70\3\0"+
    "\1\71\1\0\1\71\3\0\1\72\1\0\1\72\3\0"+
    "\1\73\1\0\1\73\3\0\1\74\1\0\1\74\3\0"+
    "\1\75\1\0\1\75\3\0\1\76\1\0\1\76\3\0"+
    "\1\77\1\0\1\77\3\0\1\100\1\0\1\100\3\0"+
    "\1\101\1\0\1\101\3\0\1\102\1\0\1\102\3\0"+
    "\1\103\1\0\1\103\3\0\1\104\1\0\1\104\3\0"+
    "\1\105\1\0\1\105\3\0\1\106\1\0\1\106\3\0"+
    "\1\107\1\0\1\107\3\0\1\110\1\0\1\110\3\0"+
    "\1\111\1\0\1\111\3\0\1\112\1\0\1\112\3\0"+
    "\1\113\1\0\1\113\3\0\1\114\1\0\1\114\3\0"+
    "\1\115\1\0\1\115\3\0\1\116\1\0\1\116\3\0"+
    "\1\117\1\0\1\117\3\0\1\120\1\0\1\120\3\0"+
    "\1\121\1\0\1\121\3\0\1\122\1\0\1\122\3\0"+
    "\1\123\1\0\1\123\3\0\1\124\1\0\1\124\3\0"+
    "\1\125\1\0\1\125\3\0\1\126\1\0\1\126\3\0"+
    "\1\127\1\0\1\127\3\0\1\130\1\0\1\130\3\0"+
    "\1\131\1\0\1\131\3\0\1\132\1\0\1\132\3\0"+
    "\1\133\1\0\1\133\3\0\1\134\1\0\1\134\3\0"+
    "\1\135\1\0\1\135\3\0\1\136\1\0\1\136\3\0"+
    "\1\137\1\0\1\137\3\0\1\140\1\0\1\140\3\0"+
    "\1\141\1\0\1\141\3\0\1\142\1\0\1\142\3\0"+
    "\1\143\1\0\1\143\3\0\1\144\1\0\1\144\3\0"+
    "\1\145\1\0\1\145\3\0\1\146\1\0\1\146\3\0"+
    "\1\147\1\0\1\147\3\0\1\150\1\0\1\150\3\0"+
    "\1\151\1\0\1\151\3\0\1\152\1\0\1\152\3\0"+
    "\1\153\1\0\1\153\3\0\1\154\1\0\1\154\3\0"+
    "\1\155\1\0\1\155\3\0\1\156\1\0\1\156\3\0"+
    "\1\157\1\0\1\157\3\0\1\160\1\0\1\160\3\0"+
    "\1\161\1\0\1\161\3\0\1\162\1\0\1\162\3\0"+
    "\1\163\1\0\1\163\3\0\1\164\1\0\1\164\3\0"+
    "\1\165\1\0\1\165\3\0\1\166\1\0\1\166\3\0"+
    "\1\167\1\0\1\167\3\0\1\170\1\0\1\170\3\0"+
    "\1\171\1\0\1\171\3\0\1\172\1\0\1\172\3\0"+
    "\1\173\1\0\1\173\3\0\1\174\1\0\1\174\3\0"+
    "\1\175\1\0\1\175\3\0\1\176\1\0\1\176\3\0"+
    "\1\177\1\0\1\177\3\0\1\200\1\0\1\200\3\0"+
    "\1\201\1\0\1\201\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[762];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\2\1\1\11\170\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private TokenFactory tokenFactory;
  private static final Logger LOGGER = Logger.getLogger(WhiteSpaceLexer.class.getName());
  
  
  /////////////////
  //// OPTIONS ////
  /////////////////
  
  
  /* Flags begin with ptb3Normalize minus americanize, brackets and forward slash escaping */
  
  //private boolean americanize = false;
  private boolean tokenizeNLs;
  private boolean tokenizeParagraphs;
 
  public WhiteSpaceLexer(Reader breader, TokenFactory tokenFactory, Properties properties) {
    this(breader);
    this.tokenFactory = tokenFactory;
    String options = properties.getProperty("paragraphs");
    if (options == null) {
      options = "";
    }
    else if (options.equalsIgnoreCase("yes")) {
        tokenizeNLs = true;
        tokenizeParagraphs = true;
    }  
  }
  
  //////////////////
  //// NEWLINES ////
  //////////////////
  
  public static final String NEWLINE_TOKEN = "*NL*";
  public static final String PARAGRAPH_TOKEN = "*<P>*";
  
  ////////////////////////
  //// MAIN FUNCTIONS ////
  ////////////////////////
  
  
  private Token makeToken() { 
    String tokenString = yytext();
    return makeToken(tokenString);
  }

  private Token makeToken(String tokenString) {
    Token token;
    if (tokenString.equalsIgnoreCase("*NL*") || tokenString.equalsIgnoreCase("*<P>*")) {
      token = tokenFactory.createToken(tokenString, yychar, 1);
    }
    else { 
      token = tokenFactory.createToken(tokenString, yychar, yylength());
    }
    return token;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  WhiteSpaceLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  WhiteSpaceLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 54) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { if (tokenizeNLs) {
                        		        return makeToken(NEWLINE_TOKEN); 
                                            }
          }
        case 6: break;
        case 1: 
          { return makeToken();
          }
        case 7: break;
        case 3: 
          { if (tokenizeNLs) {
                			        return makeToken(NEWLINE_TOKEN); 
                                        }
          }
        case 8: break;
        case 2: 
          { if (tokenizeParagraphs) { 
                                                return makeToken(PARAGRAPH_TOKEN);
                                            }
          }
        case 9: break;
        case 5: 
          { 
          }
        case 10: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
